package com.allaire.wddx;

import java.io.IOException;
import java.io.ObjectOutput;
import java.io.OutputStream;
import java.io.PrintWriter;

import java.util.Enumeration;
import java.util.NoSuchElementException;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.Vector;
import java.util.Date;

import com.allaire.util.ISO8601;
import com.allaire.util.RecordSet;
import com.allaire.util.RecordSetException;
import com.allaire.util.InvalidColumnIndexException;
import com.allaire.util.InvalidRowIndexException;
import com.allaire.util.UTF8Converter;
import com.allaire.util.SpecialCharInfo;



/**
 * A stream to which objects can be serialized using the WDDX format.
 *
 * <p>An instance of this class is created by WddxSerializer.</p>
 *
 * @author Simeon Simeonov (simeons@allaire.com)
 * @version 1.0
 * @see java.io.OutputStream
 * @see java.io.ObjectOutput
 * @see com.allaire.wddx.WddxSerializer
 */
public class WddxOutputStream extends java.io.OutputStream implements java.io.ObjectOutput
{
    ///////////////////////////////////////////////////////////////////////
    //
    // Implementation data
    //
    ///////////////////////////////////////////////////////////////////////

    
    /**
     * The UTF-8 converter used in character translation.
     */
    static protected UTF8Converter m_UTF8Converter = new UTF8Converter();

    /**
     * The serializer that is using this output stream.
     */
    protected WddxSerializer m_serializer;
        
    /**
     * PrintWriter that this stream is using to output to.
     */
    protected PrintWriter m_out;
    
    /**
     * UTF-8 special character table.
     */
    protected SpecialCharInfo[] m_UTF8CharTable;
    
    
    ///////////////////////////////////////////////////////////////////////
    //
    // Construction/Finalization
    //
    ///////////////////////////////////////////////////////////////////////


    /**
     * Construct a WDDX output stream.
     *
     * @param serializer WDDX serializer that is using the stream.
     * @param out PrintWriter that the stream is outputting to.
     *
     * @see java.io.PrintWriter
     * @see com.allaire.wddx.WddxSerializer
     *
     */
    WddxOutputStream(WddxSerializer serializer, PrintWriter out)
    {
        m_serializer = serializer;
        m_out = out;
        m_UTF8CharTable = m_UTF8Converter.getCharInfo();
    }


    ///////////////////////////////////////////////////////////////////////
    //
    // Operations
    //
    ///////////////////////////////////////////////////////////////////////


    /**
     * Flush the PrintWriter being used.
     */
    public void flush()
    {
        m_out.flush();
    }
    
    /**
     * Close the PrintWriter being used.
     */
    public void close()
    {
        m_out.close();
    }

    /**
     * Send a string to the output PrintWriter without any modifications.
     *
     * @param s String to output
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    void writeUnformattedChars(String s) throws IOException
    {
        m_out.write(s);
    }
    
    /**
     * Output the beginning of a WDDX structure.
     *
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    void writeStructBegin() throws IOException
    {
        writeUnformattedChars("<struct>");
    }

    /**
     * Output the beginning of a WDDX strictly typed structure.
     *
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    void writeStructBegin(String type) throws IOException
    {
        writeUnformattedChars("<struct type='");
        writeUnformattedChars(type);
        writeUnformattedChars("'>");
    }
    
    /**
     * Output the end of a WDDX structure.
     *
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    void writeStructEnd() throws IOException
    {
        writeUnformattedChars("</struct>");
    }
    
    
    /**
     * Output the beginning of a WDDX structure member variable.
     *
     * @param name The name of the structure member.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    void writeVarBegin(String name) throws IOException
    {
        writeUnformattedChars("<var name='");
        writeUnformattedChars(name);
        writeUnformattedChars("'>");
    }
    
    /**
     * Output the end of a WDDX structure member variable.
     *
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    void writeVarEnd() throws IOException
    {
        writeUnformattedChars("</var>");
    }
    
    
    /**
     * Output the beginning of a WDDX array.
     *
     * @param length The length of the array.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    void writeArrayBegin(int length) throws IOException
    {
        writeUnformattedChars("<array length='");
        writeUnformattedChars(String.valueOf(length));
        writeUnformattedChars("'>");
    }
    
    /**
     * Output the end of a WDDX array.
     *
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    void writeArrayEnd() throws IOException
    {
        writeUnformattedChars("</array>");
    }
    
    
    /**
     * Output the beginning of a WDDX recordset.
     *
     * @param rowCount The number of rows in the recordset
     * @param fields An array of recordset field names
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    void writeRecordSetBegin(int rowCount, String[] fields) throws IOException
    {
        writeUnformattedChars("<recordset rowCount='");
        writeUnformattedChars(String.valueOf(rowCount));
        writeUnformattedChars("' fieldNames='");
        for (int i = 0; i < fields.length; ++i)
        {
            if (i > 0)
            {
                writeUnformattedChars(",");
            }
            writeUnformattedChars(fields[i]);
        }
        writeUnformattedChars("'>");
    }
    
    /**
     * Output the end of a WDDX recordset.
     *
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    void writeRecordSetEnd() throws IOException
    {
        writeUnformattedChars("</recordset>");
    }
    
    
    /**
     * Output the beginning of a WDDX recordset field.
     *
     * @param name The name of the recordset field.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    void writeFieldBegin(String name) throws IOException
    {
        writeUnformattedChars("<field name='");
        writeUnformattedChars(name);
        writeUnformattedChars("'>");
    }
    
    /**
     * Output the end of a WDDX recordset field.
     *
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    void writeFieldEnd() throws IOException    
    {
        writeUnformattedChars("</field>");
    }
    
    /**
     * <b>Using this method will always generate an exception.</b>
     *
     * @exception java.io.IOException The exception will be generated every time the method is used.
     */
    public void writeUTF(String str) throws IOException
    {
        throw new IOException("writeUTF() cannot be called");
    }
    
    /**
     * Serialize a short value
     *
     * @param v Short value to be serialized.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    public void writeShort(int v) throws IOException
    {
        writeLong(v);
    }
    
    /**
     * Serialize an object
     *
     * @param obj Object to serialize.
     * @exception java.io.IOException The exception can be generated 
     *      by the output PrintWriter or if the object serializer 
     *      factory used in the serialization process cannot provide 
     *      a serializer for the given object's type.
     */
    public void writeObject(Object obj) throws IOException
    {
        if (obj != null)
        {
            WddxObjectSerializer os = m_serializer.getSerializerFactory().getSerializer(obj);
            if (os == null)
            {
                throw new IOException("cannot serialize object type " + obj.toString());
            }
            
            os.writeObject(this, obj);
        }
        else
        {
            writeNull();
        }
    }
    
    /**
     * Serialize a long value
     *
     * @param v Long value to be serialized.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    public void writeLong(long v) throws IOException
    {
        writeUnformattedChars("<number>");
        writeUnformattedChars(String.valueOf(v));
        writeUnformattedChars("</number>");
    }
    
    
    /**
     * Serialize an int value
     *
     * @param v Int value to be serialized.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    public void writeInt(int v) throws IOException
    {
        writeLong(v);
    }
    
    
    /**
     * Serialize a float value
     *
     * @param v Float value to be serialized.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    public void writeFloat(float v) throws IOException
    {
        writeDouble(v);
    }
    
    /**
     * Serialize a double value
     *
     * @param v Double value to be serialized.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    public void writeDouble(double v) throws IOException
    {
        writeUnformattedChars("<number>");
        writeUnformattedChars(String.valueOf(v));
        writeUnformattedChars("</number>");
    }

    /**
     * Serialize a string value
     *
     * @param s String value to be serialized.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    public void writeChars(String s) throws IOException
    {
        if (s != null)
        {
            writeUnformattedChars("<string>");

            char data[] = s.toCharArray();
            int beg = 0;
            int end = 0;
            while (data.length > 0)
            {
                // Move to end-of-string or special character
                char c;
                boolean isDone;
                do
                {
                    c = data[end];
                    ++end;
                    isDone = end >= data.length;
                } while (!isDone && c < 256 && !m_UTF8CharTable[c].isSpecialChar);
                
                if (isDone)
                {
                    // Output from beginning to end
                    m_out.write(data, beg, end - beg);
                    
                    // Exit loop
                    break;                    
                }
                else
                {
                    // Output current simple text chunk
                    if (end > beg + 1)
                    {
                        m_out.write(data, beg, end - beg - 1);
                    }
                    
                    if (c < 256)
                    {
                        // Output special character
                        m_out.write(m_UTF8CharTable[c].encoding);
                    }
                    else
                    {
                        // XML UTF-8 conversion for character value
                        // __SIM: most WDDX deserializers won't support this!
                        m_out.write("&#x");
                        m_out.write(Integer.toHexString(c));
                        m_out.write(";");
                    }

                    // Advance
                    beg = end;                
                }
            }
            
            writeUnformattedChars("</string>");        
        }
        else
        {
            writeNull();
        }
    }
    
    /**
     * <b>Using this method will always generate an exception.</b>
     *
     * @exception java.io.IOException The exception will be generated every time the method is used.
     */
    public void writeChar(int v) throws IOException
    {
        throw new IOException("writeChar() cannot be called");
    }
    
    /**
     * <b>Using this method will always generate an exception.</b>
     *
     * @exception java.io.IOException The exception will be generated every time the method is used.
     */
    public void writeBytes(String s) throws IOException
    {
        throw new IOException("writeBytes() cannot be called");
    }
    
    /**
     * Serialize a byte value
     *
     * @param v Byte value to be serialized.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    public void writeByte(int v) throws IOException
    {
        writeLong(v);
    }
    
    /**
     * Serialize a boolean value
     *
     * @param v Boolean value to be serialized.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    public void writeBoolean(boolean v) throws IOException
    {
        if (v)
        {
            writeUnformattedChars("<boolean value='true'/>");
        }
        else
        {
            writeUnformattedChars("<boolean value='false'/>");
        }
        
    }
    
    /**
     * <b>Using this method will always generate an exception.</b>
     *
     * @exception java.io.IOException The exception will be generated every time the method is used.
     */
    public void write(byte b[], int off, int len) throws IOException
    {
        throw new IOException("write(byte b[], int off, int len) cannot be called");
    }
  
    /**
     * <b>Using this method will always generate an exception.</b>
     *
     * @exception java.io.IOException The exception will be generated every time the method is used.
     */
    public void write(byte b[]) throws IOException
    {
        throw new IOException("write(byte b[]) cannot be called");
    }

    /**
     * <b>Using this method will always generate an exception.</b>
     *
     * @exception java.io.IOException The exception will be generated every time the method is used.
     */
    public void write(int b) throws IOException
    {
        throw new IOException("write(int b) cannot be called");
    }
    
    /**
     * Serialize a dictionary object
     *
     * @param d Dictionary object to be serialized.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter or in case the Dictionary object is corrupted.
     * @see java.util.Dictionary
     */
    public void writeDictionary(Dictionary d) throws IOException
    {
        if (d != null)
        {
            String type = (String)d.get("_wddx_structAttributes_type");
            if(type == null){
                writeStructBegin();
            }
            else{
                //preserve the the reserved type var as an attribute
                writeStructBegin(type);
            }
            
            Enumeration keys = d.keys();
            Enumeration values = d.elements();
            while (keys.hasMoreElements() && values.hasMoreElements())
            {
                try
                {
                    Object value = values.nextElement();
                    String name = keys.nextElement().toString();

                    //only write this var if it has not been preserved as an attribute already.
                    if(value != type){//use fast comparison for performance
                       writeVarBegin(name);
                       writeObject(value);
                       writeVarEnd();
                    }
                }
                catch(NoSuchElementException e)
                {
                    throw new IOException("Mismatched enumerations");
                }
            }
            
            writeStructEnd();
        }
        else
        {
            writeNull();
        }
    }


    /**
     * Serialize a recordset object
     *
     * @param rs RecordSet object to be serialized.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter or in case the RecordSet object is corrupted.
     * @see com.allaire.util.RecordSet
     */
    public void writeRecordSet(RecordSet rs) throws IOException
    {
        if (rs != null)
        {
    		int rowCount = rs.getRowCount();
    		int columnCount = rs.getColumnCount();
    		String[] columnNames = rs.getColumnNames();

            try
            {
        		// Output recordset beginning
        		writeRecordSetBegin(rowCount, columnNames);

        		// For all columns
        		for (int column = 0; column < columnCount; ++column)
        		{
        			// Output column beginning
        			writeFieldBegin(columnNames[column]);

        			// Output column data
        			for (int row = 0; row < rowCount; ++row)
        			{
        				writeObject(rs.getField(row, column));
        			}

        			// Output column end
        			writeFieldEnd();
        		}

        		// Output recordset end
        		writeRecordSetEnd();
        	}
        	catch(RecordSetException e)
        	{
        	    throw new IOException(
        	        "Recordset exception");
        	}
        }
        else
        {
            writeNull();
        }
    }


    /**
     * Serialize a section of an object array
     *
     * @param values Array of objects.
     * @param start Index to start serializing from.
     * @param length Number of objects to serialize.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    public void writeObjectArray(Object[] values, int start, int length) throws IOException
    {
        writeArrayBegin(length);
        for (int i = start; i < start + length; ++i)
        {
            writeObject(values[i]);
        }
        writeArrayEnd();
    }


    /**
     * Serialize an array of objects
     *
     * @param values Array of objects.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    public void writeObjectArray(Object[] values) throws IOException
    {
        writeObjectArray(values, 0, values.length);
    }

    
    /**
     * Serialize a vecotr object
     *
     * @param v Vector object to be serialized.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter or in case the Vector object is corrupted.
     * @see java.util.Vector
     */
    public void writeVector(Vector v) throws IOException
    {
        if (v != null)
        {
            writeArrayBegin(v.size());
            for (int i = 0; i < v.size(); ++i)
            {
                writeObject(v.elementAt(i));
            }
            writeArrayEnd();
        }
        else
        {
            writeNull();
        }
    }
    
    
    /**
     * Serialize a date object
     *
     * @param d Date object to be serialized.
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     * @see java.util.Date
     */
    public void writeDate(Date d) throws IOException
    {
        if (d != null)
        {
            writeUnformattedChars("<dateTime>");
            writeUnformattedChars(ISO8601.stringValueOf(d, true));
            writeUnformattedChars("</dateTime>");
        }
        else
        {
            writeNull();
        }
    }
    
    /**
     * Serialize a null value.
     *
     * @exception java.io.IOException The exception can be generated by the output PrintWriter.
     */
    public void writeNull() throws IOException
    {
        writeUnformattedChars("<null/>");
    }
}