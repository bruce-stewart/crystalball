/*
 * JPropertySheetEditor.java
 *
 * Created on April 29, 2001, 11:14 AM
 */
package com.lrc.swing;

import java.awt.*;

import java.beans.*;

import java.io.*;

import java.lang.reflect.*;

import java.util.*;

import javax.swing.*;
import javax.swing.table.*;


/**
 * Quick and Dirty Property Editor for Beans.
 *
 * @author fred
 * @version
 */
public class JPropertySheetEditor extends javax.swing.JPanel {
    private transient java.util.List listeners = new LinkedList();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTable table;
    private javax.swing.JButton dismissButton;
    private javax.swing.JTextArea description;
    TModel tm = null;

    /** Holds value of property dismissEnabled. */
    private boolean dismissEnabled = true;

    /**
     * Creates new form JPropertySheetEditor
     */
    public JPropertySheetEditor() {
        initComponents();

        //table.setDefaultRenderer(File.class, new FileFieldRenderer());
    }

    public void addJPropertySheetEditorListener(JPropertySheetEditorListener l) {
        listeners.add(l);
    }

    public void removeJPropertySheetEditorListener(JPropertySheetEditorListener l) {
        listeners.remove(l);
    }

    public static JPSDialog createJPSDialog(Frame owner) {
        JPropertySheetEditor pse = new JPropertySheetEditor();

        return pse.createDialog(owner);
    }

    private JPSDialog createDialog(Frame owner) {
        JPSDialog dia = new JPSDialog(owner);
        dia.getContentPane().setLayout(new BorderLayout());
        dia.getContentPane().add(this, BorderLayout.CENTER);
        dia.setSize(350, 250);
        this.addJPropertySheetEditorListener(dia);

        return dia;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING:
     * Do NOT modify this code. The content of this method is always regenerated by the
     * FormEditor.
     */
    private void initComponents() { //GEN-BEGIN:initComponents
        scroll = new javax.swing.JScrollPane();
        table = new OurTable();
        dismissButton = new javax.swing.JButton();
        description = new javax.swing.JTextArea();
        setLayout(new java.awt.BorderLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {
                                                                   { null, null },
                                                                   { null, null },
                                                                   { null, null },
                                                                   { null, null }
                                                               },
                                                               new String[] {
                                                                   "Property", "Value"
                                                               }) {
                boolean[] canEdit = new boolean[] { false, true };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        scroll.setViewportView(table);

        add(scroll, java.awt.BorderLayout.CENTER);

        dismissButton.setFont(new java.awt.Font("Dialog", 1, 14));
        dismissButton.setText("Dismiss");
        dismissButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    dismissButtonActionPerformed(evt);
                }
            });

        add(dismissButton, java.awt.BorderLayout.SOUTH);

        description.setFont(new java.awt.Font("Dialog", 0, 14));
        description.setText("Descriptio information about bean");

        add(description, java.awt.BorderLayout.NORTH);
    }
     //GEN-END:initComponents

    private void dismissButtonActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_dismissButtonActionPerformed

        Iterator it = listeners.iterator();

        while (it.hasNext())
            ((JPropertySheetEditorListener) it.next()).dismissed(tm.bean);
    }
     //GEN-LAST:event_dismissButtonActionPerformed

    //new TModel();

    /**
     * Introspect bean for properties and display them.
     *
     * @param bean DOCUMENT ME!
     * @param stopClass DOCUMENT ME!
     *
     * @throws IntrospectionException DOCUMENT ME!
     */
    public void setBean(Object bean, Class stopClass) throws IntrospectionException {
        tm = new TModel(bean, Introspector.getBeanInfo(bean.getClass(), stopClass));
        table.setModel(tm);
        tm.fireTableStructureChanged();
        description.setText("Bean: "+bean.getClass().getName());
    }

    public void setBean(Object bean) throws IntrospectionException {
        setBean(bean, Object.class);
    }

    static public void main(String[] av) {
        try {
            TestBean bean = new TestBean();
            JPropertySheetEditor.JPSDialog dia =
                JPropertySheetEditor.createJPSDialog(null);
            JPropertySheetEditor pse = dia.getSheet();
            pse.setBean(bean);
            dia.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            dia.setVisible(true);

            pse.addJPropertySheetEditorListener(new JPropertySheetEditorListener() {
                    public void dismissed(Object bean) {
                        System.exit(0);
                    }
                });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Getter for property dismissEnabled.
     *
     * @return Value of property dismissEnabled.
     */
    public boolean isDismissEnabled() {
        return dismissEnabled;
    }

    /**
     * Setter for property dismissEnabled.
     *
     * @param dismissEnabled New value of property dismissEnabled.
     */
    public void setDismissEnabled(boolean dismissEnabled) {
        this.dismissEnabled = dismissEnabled;
        dismissButton.setVisible(dismissEnabled);
        invalidate();
    }

    class OurTable extends JTable {
        transient FileFieldRenderer ffr = new FileFieldRenderer();
        transient FileFieldEditor ffe = new FileFieldEditor();

        public TableCellRenderer getCellRenderer(int row, int col) {
            if ((tm != null) && tm.getValueAt(row, col) instanceof File)
                return ffr;
            else

                return super.getCellRenderer(row, col);
        }

        public TableCellEditor getCellEditor(int row, int col) {
            if ((tm != null) && tm.getValueAt(row, col) instanceof File)
                return ffe;
            else

                return super.getCellEditor(row, col);
        }
    }


    /**
     * DOCUMENT ME!
     *
     * @author $author$
     * @version $Revision: 1.1 $
     */
    public class JPSDialog extends JDialog implements JPropertySheetEditorListener {
        JPSDialog(Frame owner) {
            super(owner);
        }

        public JPropertySheetEditor getSheet() {
            return JPropertySheetEditor.this;
        }

        /**
         * When the user finishes editing the bean properties and clicks "dismiss", this
         * is called to notify listener of dismissal.
         *
         * @param bean DOCUMENT ME!
         */
        public void dismissed(final java.lang.Object bean) {
            //removeJPropertySheetEditorListener(this);
            dispose();
        }
    }


    // End of variables declaration//GEN-END:variables
    private class TModel extends AbstractTableModel implements java.io.Serializable {
        Object bean;
        BeanInfo bi;
        PropertyDescriptor[] pi;
        TreeMap tpi = new TreeMap();
        transient Class[] columnClasses = { String.class, Object.class };

        TModel(Object bean, BeanInfo bi) {
            this.bean = bean;
            this.bi = bi;
            pi = bi.getPropertyDescriptors();

            for (int i = 0; i < pi.length; ++i)
                tpi.put(pi[i].getShortDescription(), pi[i]);

            // We must now sort the properties!
            pi = new PropertyDescriptor[pi.length];

            Iterator it = tpi.entrySet().iterator();

            for (int i = 0; it.hasNext(); ++i)
                pi[i] = (PropertyDescriptor) ((Map.Entry) it.next()).getValue();
        }

        public String getColumnName(int col) {
            switch (col) {
            case 0:
                return "Property";

            case 1:
                return "Value";

            default:
                return "col "+col;
            }
        }

        /**
         */
        public Class getColumnClass(int c) {
            return columnClasses[c];
        }

        public int getRowCount() {
            return pi.length;
        }

        public int getColumnCount() {
            return 2;
        }

        public boolean isCellEditable(int row, int col) {
            return col == 1;
        }

        public Object getValueAt(int r, int c) {
            try {
                return (c == 0) ? pi[r].getShortDescription()
                                : ((c == 1)
                                   ? ((pi[r].getReadMethod() != null)
                                      ? pi[r].getReadMethod().invoke(bean, null) : null)
                                   : null);
            } catch (Exception e) {
                e.printStackTrace();

                return null;
            }
        }

        public void setValueAt(Object v, int r, int c) {
            try {
                if (c == 1) {
                    Object[] args = { v };
                    Class clazz = pi[r].getPropertyType();

                    if (!clazz.isInstance(v)) {
                        if (clazz.isPrimitive()) {
                            if (Boolean.TYPE.isAssignableFrom(clazz))
                                args[0] = Boolean.valueOf(v.toString());
                            else if (Byte.TYPE.isAssignableFrom(clazz))
                                args[0] = Byte.valueOf(v.toString());
                            else if (Short.TYPE.isAssignableFrom(clazz))
                                args[0] = Short.valueOf(v.toString());
                            else if (Integer.TYPE.isAssignableFrom(clazz))
                                args[0] = Integer.valueOf(v.toString());
                            else if (Long.TYPE.isAssignableFrom(clazz))
                                args[0] = Long.valueOf(v.toString());
                            else if (Float.TYPE.isAssignableFrom(clazz))
                                args[0] = Float.valueOf(v.toString());
                            else if (Double.TYPE.isAssignableFrom(clazz))
                                args[0] = Double.valueOf(v.toString());
                        } else if (Number.class.isAssignableFrom(clazz)) {
                            Class[] cargs = { v.getClass() };
                            Method m = clazz.getMethod("valueOf", cargs);
                            args[0] = m.invoke(null, args);
                        }
                    }

                    pi[r].getWriteMethod().invoke(bean, args);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}



class TestBean {
    int a1 = 1;
    float a2 = 2.0f;
    String a3 = "three";
    byte a4 = 2;
    Float bfloat = new Float(2002.2002);

    public Float getObFloat() {
        return bfloat;
    }

    public void setObFloat(Float bf) {
        bfloat = bf;
    }

    public byte getAByte() {
        return a4;
    }

    public void setAByte(byte a) {
        a4 = a;
    }

    public int getAInt() {
        return a1;
    }

    public void setAInt(int a) {
        a1 = a;
    }

    public float getAFloat() {
        return a2;
    }

    public void setAFloat(float a) {
        a2 = a;
    }

    public String getAString() {
        return a3;
    }

    public void setAString(String a) {
        a3 = a;
    }
}
